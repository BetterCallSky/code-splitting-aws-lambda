Description: >
  Code splitting lambda
Parameters:
  APIFunctionVersion:
    Description: "Version of the lambda function required to update existing stack"
    Type: String
    Default: "latest"

  S3BucketName:
    Description: "S3BucketName"
    Type: "String"

  NamePrefix:
    Type: String
    Description: The name prefix for resources like lambda, api etc.
    AllowedPattern: ^.*[^0-9]$
    ConstraintDescription: Must end with non numeric character.

  EnvName:
    Type: String
    Description: Name of an environment. 'dev', 'staging', 'prod' and any name.
    AllowedPattern: ^.*[^0-9]$
    ConstraintDescription: Must end with non numeric character.

Outputs:
  APIEndpoint:
    Value: !Sub "https://${RPC}.execute-api.${AWS::Region}.amazonaws.com/default/"

Resources:
  ######################
  ## API LAMBDA
  ######################

  APIFunctionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Policies:
        - PolicyName: "APIFunctionPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"

  APIFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: !Ref S3BucketName
        S3Key: !Sub APIFunction/${APIFunctionVersion}.zip
      Environment:
        Variables:
          NODE_ENV: production
      FunctionName: !Sub ${NamePrefix}-${EnvName}
      Handler: "app-lambda.handler"
      MemorySize: 1536
      Role: !GetAtt APIFunctionRole.Arn
      Runtime: "nodejs10.x"
      Timeout: 7

  ######################
  ## RPC API GATEWAY
  ######################

  RPC:
    Type: "AWS::ApiGateway::RestApi"
    Properties:
      Name: !Sub ${NamePrefix}-${EnvName}
  RPCResource:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      RestApiId: !Ref RPC
      ParentId: !GetAtt
        - RPC
        - RootResourceId
      PathPart: "{proxy+}"
  RPCRootMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      AuthorizationType: "NONE"
      HttpMethod: "ANY"
      Integration:
        IntegrationHttpMethod: "POST"
        Type: "AWS_PROXY"
        Uri: !Sub
          - "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations"
          - lambdaArn: !GetAtt "APIFunction.Arn"
      ResourceId: !Ref "RPCResource"
      RestApiId: !Ref "RPC"

  RPCDeployment:
    Type: "AWS::ApiGateway::Deployment"
    DependsOn: RPCRootMethod
    Properties:
      RestApiId: !Ref RPC
      StageName: default

  RPCInvoke:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !GetAtt "APIFunction.Arn"
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RPC}/*/*"
